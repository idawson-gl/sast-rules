# yamllint disable
# License: LGPL 2.1 (c) Return To Corporation
# source (original): 
# https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/dynamic-urllib-use-detected.yaml
# hash: acdabdb
# id: dynamic-urllib-use-detected
# yamllint enable
---
rules:
- id: "python/urlopen/rule-urllib_urlopen1"
  patterns:
  - pattern-not: "urllib.$W(\"...\")"
  - pattern-not: "urllib.request.$W(\"...\")"
  - pattern-not: "$OPENER.$W(\"...\")"
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: "urllib.urlopen(...)"
        - pattern: "urllib.request.urlopen(...)"
        - pattern: "urllib.urlretrieve(...)"
        - pattern: "urllib.request.urlretrieve(...)"
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $OPENER = urllib.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.FancyURLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.FancyURLopener(...)
            ...
      - pattern-either:
        - pattern: "$OPENER.open(...)"
        - pattern: "$OPENER.retrieve(...)"
  message: |
    Detected a dynamic value being used with urllib. urllib supports `file://` schemes, so a
    dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit
    uses of urllib calls to ensure user data cannot control the URLs, or consider using the
    `requests` library instead.
  metadata:
    cwe: "CWE-939: Improper Authorization in Handler for Custom URL Scheme"
    owasp: "A5: Broken Access Control"
  severity: "WARNING"
  languages:
  - "python"
